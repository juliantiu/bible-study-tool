// <auto-generated />
using System;
using BibleStudyTool.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BibleStudyTool.Infrastructure.Data.Migrations
{
    [DbContext(typeof(BibleReadingDbContext))]
    [Migration("20210916050037_MyFirstMigration3")]
    partial class MyFirstMigration3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleBook", b =>
                {
                    b.Property<int>("BibleBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BibleVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("BibleBookName");

                    b.HasKey("BibleBookId");

                    b.HasIndex("BibleVersionId");

                    b.ToTable("BibleBooks");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleBookAbbreviation", b =>
                {
                    b.Property<int>("BibleBookAbbreviationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("BibleBookAbbreviation");

                    b.Property<int>("BibleBookId")
                        .HasColumnType("integer");

                    b.HasKey("BibleBookAbbreviationId");

                    b.HasIndex("BibleBookId");

                    b.ToTable("BibleBookAbbreviations");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleVerse", b =>
                {
                    b.Property<int>("BibleVerseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BibleBookId")
                        .HasColumnType("integer");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BibleVerseText");

                    b.Property<int>("VerseNumber")
                        .HasColumnType("integer");

                    b.HasKey("BibleVerseId");

                    b.HasIndex("BibleBookId");

                    b.ToTable("BibleVerses");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleVersion", b =>
                {
                    b.Property<int>("BibleVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("BibleVersionAbbreviation");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("BibleVersionName");

                    b.HasKey("BibleVersionId");

                    b.HasIndex("LanguageId");

                    b.ToTable("BibleVersions");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Endonym")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("LanguageName");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.BibleVerseNote", b =>
                {
                    b.Property<int>("BibleVerseNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BibleVerseId")
                        .HasColumnType("integer");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.HasKey("BibleVerseNoteId");

                    b.HasIndex("BibleVerseId");

                    b.HasIndex("NoteId");

                    b.ToTable("BibleVerseNotes");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.NoteReference", b =>
                {
                    b.Property<int>("NoteReferenceId")
                        .HasColumnType("integer");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("integer");

                    b.HasKey("NoteReferenceId");

                    b.HasIndex("NoteId");

                    b.ToTable("NoteReferences");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.TagGroupNote", b =>
                {
                    b.Property<int>("TagGroupNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<int>("TagGroupId")
                        .HasColumnType("integer");

                    b.HasKey("TagGroupNoteId");

                    b.HasIndex("NoteId");

                    b.HasIndex("TagGroupId");

                    b.ToTable("TagGroupNotes");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.TagGroupTag", b =>
                {
                    b.Property<int>("TagGroupTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("TagGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("TagGroupTagId");

                    b.HasIndex("TagGroupId");

                    b.HasIndex("TagId");

                    b.ToTable("TagGroupTags");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.TagNote", b =>
                {
                    b.Property<int>("TagNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("TagNoteId");

                    b.HasIndex("NoteId");

                    b.HasIndex("TagId");

                    b.ToTable("TagNotes");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("NoteText");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NoteUid");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TagLabel");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TagUid");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.TagGroup", b =>
                {
                    b.Property<int>("TagGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("TagGroupLabel");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TagGroupUid");

                    b.HasKey("TagGroupId");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("BibleStudyTool.Infrastructure.Data.Identity.BibleReader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("BibleReaders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleBook", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.BibleAggregate.BibleVersion", "BibleVersion")
                        .WithMany("BibleBooks")
                        .HasForeignKey("BibleVersionId")
                        .IsRequired();

                    b.Navigation("BibleVersion");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleBookAbbreviation", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.BibleAggregate.BibleBook", "BibleBook")
                        .WithMany("BibleBookAbbreviations")
                        .HasForeignKey("BibleBookId")
                        .IsRequired();

                    b.Navigation("BibleBook");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleVerse", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.BibleAggregate.BibleBook", "BibleBook")
                        .WithMany("BibleBookVerses")
                        .HasForeignKey("BibleBookId")
                        .IsRequired();

                    b.Navigation("BibleBook");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleVersion", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.BibleAggregate.Language", "Language")
                        .WithMany("BibleVersions")
                        .HasForeignKey("LanguageId")
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.BibleVerseNote", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.BibleAggregate.BibleVerse", "BibleVerse")
                        .WithMany("BibleVerseNotes")
                        .HasForeignKey("BibleVerseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BibleStudyTool.Core.Entities.Note", "Note")
                        .WithMany("BibleVerseNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BibleVerse");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.NoteReference", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.Note", "Note")
                        .WithMany("Notes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BibleStudyTool.Core.Entities.Note", "Reference")
                        .WithMany("NoteReferences")
                        .HasForeignKey("NoteReferenceId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.TagGroupNote", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.Note", "Note")
                        .WithMany("TagGroupNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BibleStudyTool.Core.Entities.TagGroup", "TagGroup")
                        .WithMany("TagGroupNotes")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("TagGroup");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.TagGroupTag", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.TagGroup", "TagGroup")
                        .WithMany("TagGroupTags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BibleStudyTool.Core.Entities.Tag", "Tag")
                        .WithMany("TagGroupTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("TagGroup");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.JoinEntities.TagNote", b =>
                {
                    b.HasOne("BibleStudyTool.Core.Entities.Note", "Note")
                        .WithMany("TagNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("BibleStudyTool.Core.Entities.Tag", "Tag")
                        .WithMany("TagNotes")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BibleStudyTool.Infrastructure.Data.Identity.BibleReader", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BibleStudyTool.Infrastructure.Data.Identity.BibleReader", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibleStudyTool.Infrastructure.Data.Identity.BibleReader", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BibleStudyTool.Infrastructure.Data.Identity.BibleReader", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleBook", b =>
                {
                    b.Navigation("BibleBookAbbreviations");

                    b.Navigation("BibleBookVerses");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleVerse", b =>
                {
                    b.Navigation("BibleVerseNotes");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.BibleVersion", b =>
                {
                    b.Navigation("BibleBooks");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.BibleAggregate.Language", b =>
                {
                    b.Navigation("BibleVersions");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.Note", b =>
                {
                    b.Navigation("BibleVerseNotes");

                    b.Navigation("NoteReferences");

                    b.Navigation("Notes");

                    b.Navigation("TagGroupNotes");

                    b.Navigation("TagNotes");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.Tag", b =>
                {
                    b.Navigation("TagGroupTags");

                    b.Navigation("TagNotes");
                });

            modelBuilder.Entity("BibleStudyTool.Core.Entities.TagGroup", b =>
                {
                    b.Navigation("TagGroupNotes");

                    b.Navigation("TagGroupTags");
                });
#pragma warning restore 612, 618
        }
    }
}
